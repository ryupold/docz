/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package docz;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.xml.namespace.QName;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import net.sourceforge.jdatepicker.DateModel;
import net.sourceforge.jdatepicker.JDateComponentFactory;
import net.sourceforge.jdatepicker.JDatePanel;
import net.sourceforge.jdatepicker.impl.JDatePanelImpl;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 *
 * @author Michael
 */
public class DocZMainFrame extends javax.swing.JFrame {

    private WaitDialog.AsyncProcess searchProgress = null;

    /**
     * Creates new form DocZMainFrame
     */
    public DocZMainFrame() {
        initComponents();

        setTitle("DocZ");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        Log.l("DB file = " + DataHandler.instance);

        addWindowListener(new WindowAdapter() {

            @Override
            public void windowOpened(WindowEvent e) {
                try {
                    if (!DataHandler.instance.testConnection()) {
                        JPasswordField pf = new JPasswordField();
                        int okCxl = JOptionPane.showConfirmDialog(null, pf, "Enter password of the AES-encrypted database file.", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

                        if (okCxl == JOptionPane.OK_OPTION) {
                            String password = new String(pf.getPassword());
                            DB.setPW(password);
                            DataHandler.instance.testConnection();
                            DataHandler.instance.init();
                        } else {
                            JOptionPane.showConfirmDialog(null, "This database is encrypted, you need a password to proceed", "Error", JOptionPane.CLOSED_OPTION, JOptionPane.WARNING_MESSAGE);
                            System.exit(1);
                        }
                    }
                } catch (SQLException ex) {
                    if (ex.getMessage().contains("Encryption error")) {
                        boolean canLeave = false;
                        while (!canLeave) {
                            try {
                                JPasswordField pf = new JPasswordField();
                                int okCxl = JOptionPane.showConfirmDialog(null, pf, "Wrong password! Please enter the right one.", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

                                if (okCxl == JOptionPane.OK_OPTION) {
                                    String password = new String(pf.getPassword());
                                    DB.setPW(password);
                                    DataHandler.instance.testConnection();
                                    DataHandler.instance.init();
                                } else {
                                    JOptionPane.showConfirmDialog(null, "This database is encrypted, you need a password to proceed", "Error", JOptionPane.CLOSED_OPTION, JOptionPane.WARNING_MESSAGE);
                                    System.exit(1);
                                }

                                canLeave = true;
                            } catch (SQLException ise) {
                                if (!ise.getMessage().contains("Encryption error")) {
                                    canLeave = true;
                                }
                            }
                        }
                    }
                }

                //initial search
                doSearch(100);
            }

        });
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method
     * is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtSearch = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnChangePW = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        ckbDocs = new javax.swing.JCheckBox();
        ckbRelations = new javax.swing.JCheckBox();
        ckbInstitutions = new javax.swing.JCheckBox();
        ckbTags = new javax.swing.JCheckBox();
        spMaxResult = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ckbMinDate = new javax.swing.JCheckBox();
        ckbMaxDate = new javax.swing.JCheckBox();
        btnMinDate = new javax.swing.JButton();
        btnMaxDate = new javax.swing.JButton();
        ckbFiles = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        cbxSorting = new javax.swing.JComboBox();
        ckbDescending = new javax.swing.JCheckBox();
        contentPanel = new docz.ContentPanel();
        jButton1 = new javax.swing.JButton();
        btnImport = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtSearch.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        txtSearch.setToolTipText("Search...");
        txtSearch.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                txtSearchInputMethodTextChanged(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchKeyTyped(evt);
            }
        });

        btnAdd.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        btnAdd.setText("+");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnChangePW.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnChangePW.setText("Change database PW");
        btnChangePW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangePWActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Filter", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 16))); // NOI18N

        ckbDocs.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        ckbDocs.setSelected(true);
        ckbDocs.setText("Docs");
        ckbDocs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckbDocsActionPerformed(evt);
            }
        });

        ckbRelations.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        ckbRelations.setSelected(true);
        ckbRelations.setText("Relations");
        ckbRelations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckbRelationsActionPerformed(evt);
            }
        });

        ckbInstitutions.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        ckbInstitutions.setSelected(true);
        ckbInstitutions.setText("Institutions");
        ckbInstitutions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckbInstitutionsActionPerformed(evt);
            }
        });

        ckbTags.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        ckbTags.setSelected(true);
        ckbTags.setText("Tags");
        ckbTags.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckbTagsActionPerformed(evt);
            }
        });

        spMaxResult.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        spMaxResult.setModel(new javax.swing.SpinnerNumberModel(50, 1, 10000, 1));
        spMaxResult.setToolTipText("");
        spMaxResult.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spMaxResultStateChanged(evt);
            }
        });
        spMaxResult.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                spMaxResultCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                spMaxResultInputMethodTextChanged(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setText("max. results:");

        jLabel2.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel2.setText("filter date:");

        ckbMinDate.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        ckbMinDate.setText("min:");
        ckbMinDate.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ckbMinDateStateChanged(evt);
            }
        });
        ckbMinDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckbMinDateActionPerformed(evt);
            }
        });

        ckbMaxDate.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        ckbMaxDate.setText("max:");
        ckbMaxDate.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ckbMaxDateStateChanged(evt);
            }
        });
        ckbMaxDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckbMaxDateActionPerformed(evt);
            }
        });

        btnMinDate.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        btnMinDate.setText("21.04.1988");
        btnMinDate.setEnabled(false);
        btnMinDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMinDateActionPerformed(evt);
            }
        });

        btnMaxDate.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        btnMaxDate.setText("01.10.2014");
        btnMaxDate.setEnabled(false);
        btnMaxDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMaxDateActionPerformed(evt);
            }
        });

        ckbFiles.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        ckbFiles.setSelected(true);
        ckbFiles.setText("Files");
        ckbFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckbFilesActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel3.setText("Sort by:");

        cbxSorting.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        cbxSorting.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Created", "Date", "Title" }));
        cbxSorting.setToolTipText("");
        cbxSorting.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxSortingItemStateChanged(evt);
            }
        });

        ckbDescending.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        ckbDescending.setSelected(true);
        ckbDescending.setText("DESC");
        ckbDescending.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ckbDescendingStateChanged(evt);
            }
        });
        ckbDescending.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckbDescendingActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spMaxResult))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(ckbMinDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(ckbMaxDate))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnMaxDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnMinDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ckbRelations)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(ckbDocs)
                                .addGap(18, 18, 18)
                                .addComponent(ckbInstitutions))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(ckbFiles)
                                .addGap(18, 18, 18)
                                .addComponent(ckbTags)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbxSorting, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ckbDescending)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ckbDocs)
                    .addComponent(ckbInstitutions))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ckbFiles)
                    .addComponent(ckbTags))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ckbRelations)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spMaxResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(58, 58, 58)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ckbMinDate)
                    .addComponent(btnMinDate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ckbMaxDate)
                    .addComponent(btnMaxDate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cbxSorting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ckbDescending))
                .addContainerGap())
        );

        //ckbDocs.setVisible(false);
        //ckbRelations.setVisible(false);
        //ckbInstitutions.setVisible(false);
        //ckbTags.setVisible(false);

        contentPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Search Results"));
        contentPanel.setPreferredSize(null);

        jButton1.setText("export");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnImport.setText("import");
        btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtSearch)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnChangePW)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnImport)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(contentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 1235, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(contentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 88, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(btnImport))
                        .addGap(18, 18, 18)
                        .addComponent(btnChangePW)
                        .addGap(18, 18, 18)
                        .addComponent(btnAdd)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtSearchInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_txtSearchInputMethodTextChanged
        //delete me
    }//GEN-LAST:event_txtSearchInputMethodTextChanged

    private void txtSearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyTyped
        doSearch(1000);
    }//GEN-LAST:event_txtSearchKeyTyped

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        AddDialog addDialog = new AddDialog(this, true);
        addDialog.dispose();
        System.gc();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnChangePWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangePWActionPerformed
        ChangePassword pwDialog = new ChangePassword(this, true);
        pwDialog.setVisible(true);
        pwDialog.dispose();
        System.gc();
        DataHandler.instance.init();
    }//GEN-LAST:event_btnChangePWActionPerformed

    private void btnMinDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMinDateActionPerformed
        JDatePanel datePanel = (JDatePanelImpl) JDateComponentFactory.createJDatePanel();
        int okCxl = JOptionPane.showConfirmDialog(null, datePanel, "Datum auswählen", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        if (okCxl == JOptionPane.OK_OPTION) {
            DateModel<?> dm = ((JDatePanel) datePanel).getModel();
            btnMinDate.setText(dm.getDay() + "." + (1 + dm.getMonth()) + "." + dm.getYear());
            doSearch(100);
        }
    }//GEN-LAST:event_btnMinDateActionPerformed

    private void btnMaxDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMaxDateActionPerformed
        JDatePanel datePanel = (JDatePanelImpl) JDateComponentFactory.createJDatePanel();
        int okCxl = JOptionPane.showConfirmDialog(null, datePanel, "Datum auswählen", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        if (okCxl == JOptionPane.OK_OPTION) {
            DateModel<?> dm = ((JDatePanel) datePanel).getModel();
            btnMaxDate.setText(dm.getDay() + "." + (1 + dm.getMonth()) + "." + dm.getYear());
            doSearch(100);
        }
    }//GEN-LAST:event_btnMaxDateActionPerformed

    private void ckbMinDateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ckbMinDateStateChanged
        btnMinDate.setEnabled(ckbMinDate.isSelected());
    }//GEN-LAST:event_ckbMinDateStateChanged

    private void ckbMaxDateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ckbMaxDateStateChanged
        btnMaxDate.setEnabled(ckbMaxDate.isSelected());
    }//GEN-LAST:event_ckbMaxDateStateChanged

    private void ckbInstitutionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckbInstitutionsActionPerformed
        doSearch(100);
    }//GEN-LAST:event_ckbInstitutionsActionPerformed

    private void ckbDocsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckbDocsActionPerformed
        doSearch(100);
    }//GEN-LAST:event_ckbDocsActionPerformed

    private void ckbFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckbFilesActionPerformed
        doSearch(100);
    }//GEN-LAST:event_ckbFilesActionPerformed

    private void ckbTagsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckbTagsActionPerformed
        doSearch(100);
    }//GEN-LAST:event_ckbTagsActionPerformed

    private void ckbRelationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckbRelationsActionPerformed
        doSearch(100);
    }//GEN-LAST:event_ckbRelationsActionPerformed

    private void spMaxResultStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spMaxResultStateChanged

    }//GEN-LAST:event_spMaxResultStateChanged

    private void cbxSortingItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxSortingItemStateChanged

    }//GEN-LAST:event_cbxSortingItemStateChanged

    private void ckbDescendingStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ckbDescendingStateChanged

    }//GEN-LAST:event_ckbDescendingStateChanged

    private void ckbDescendingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckbDescendingActionPerformed
        doSearch(100);
    }//GEN-LAST:event_ckbDescendingActionPerformed

    private void ckbMinDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckbMinDateActionPerformed
        doSearch(100);
    }//GEN-LAST:event_ckbMinDateActionPerformed

    private void ckbMaxDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckbMaxDateActionPerformed
        doSearch(100);
    }//GEN-LAST:event_ckbMaxDateActionPerformed

    private void spMaxResultInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_spMaxResultInputMethodTextChanged

    }//GEN-LAST:event_spMaxResultInputMethodTextChanged

    private void spMaxResultCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_spMaxResultCaretPositionChanged
        doSearch(1000);
    }//GEN-LAST:event_spMaxResultCaretPositionChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        final JFileChooser fc = new JFileChooser();
        fc.setMultiSelectionEnabled(false);
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setFileSelectionMode(JFileChooser.SAVE_DIALOG);
        if (fc.showDialog(this, "export database") == JFileChooser.APPROVE_OPTION) {

            new WaitDialog(this, new WaitDialog.AsyncProcess("exporting database...") {

                @Override
                public void finished(boolean success) {

                }

                @Override
                public void start() throws Exception {

                    try {
                        this.processing(0.0, "initializing destination");
                        if (isCanceled()) {
                            Log.l("exporting aborted");
                            return;
                        }

                        //export dir
                        File exportDir = fc.getSelectedFile();
                        File dbFile = new File(exportDir.getPath() + File.separator + "db.xml");
                        File fileDir = new File(exportDir.getPath() + File.separator + "files");
                        fileDir.mkdirs();

                        if (isCanceled()) {
                            Log.l("exporting aborted");
                            return;
                        }
                        //entity xml doc
                        DocumentBuilder db = DocumentBuilderFactory.newInstance().newDocumentBuilder();
                        Document document = db.newDocument();
                        Element root = document.createElement("docz");
                        document.appendChild(root);

                        if (isCanceled()) {
                            Log.l("exporting aborted");
                            return;
                        }
                        this.processing(0.01, "exporting entity data");
                        Element entities = document.createElement("entities");
                        root.appendChild(entities);

                        DB.DBResult r = DB.select("SELECT id, title, description, date, created, type FROM entities ORDER BY id");
                        try {
                            while (r.resultSet.next()) {
                                Element entity = document.createElement("entity");
                                Element id = document.createElement("id");
                                id.setTextContent(r.resultSet.getString(1));
                                entity.appendChild(id);
                                Element title = document.createElement("title");
                                title.setTextContent(r.resultSet.getString(2));
                                entity.appendChild(title);
                                Element description = document.createElement("description");
                                description.setTextContent(r.resultSet.getString(3));
                                entity.appendChild(description);
                                Element date = document.createElement("date");
                                date.setTextContent(r.resultSet.getString(4));
                                entity.appendChild(date);
                                Element created = document.createElement("created");
                                created.setTextContent(r.resultSet.getString(5));
                                entity.appendChild(created);
                                Element type = document.createElement("type");
                                type.setTextContent(r.resultSet.getString(6));
                                entity.appendChild(type);
                                entities.appendChild(entity);
                            }

                            r.close();

                            if (isCanceled()) {
                                Log.l("exporting aborted");
                                return;
                            }
                            this.processing(0.2, "exporting tags...");
                            //tags xml doc
                            Element tags = document.createElement("tags");
                            root.appendChild(tags);

                            r = DB.select("SELECT id, tag FROM tags ORDER BY id");
                            while (r.resultSet.next()) {
                                if (isCanceled()) {
                                    Log.l("exporting aborted");
                                    return;
                                }
                                Element tag = document.createElement("tag");
                                Element id = document.createElement("id");
                                id.setTextContent(r.resultSet.getString(1));
                                tag.appendChild(id);
                                Element tagname = document.createElement("tag");
                                tagname.setTextContent(r.resultSet.getString(2));
                                tag.appendChild(tagname);
                                tags.appendChild(tag);
                            }
                            r.close();

                            if(isCanceled()) {Log.l("exporting aborted"); return;}
                            this.processing(0.3, "exporting relations...");
                            //relation xml doc
                            Element relations = document.createElement("relations");
                            root.appendChild(relations);

                            r = DB.select("SELECT id, title, description, created, entity1, entity2 FROM relations ORDER BY id");
                            while (r.resultSet.next()) {
                                Element relation = document.createElement("relation");
                                Element id = document.createElement("id");
                                id.setTextContent(r.resultSet.getString(1));
                                relation.appendChild(id);
                                Element title = document.createElement("title");
                                title.setTextContent(r.resultSet.getString(2));
                                relation.appendChild(title);
                                Element description = document.createElement("description");
                                description.setTextContent(r.resultSet.getString(3));
                                relation.appendChild(description);
                                Element created = document.createElement("created");
                                created.setTextContent(r.resultSet.getString(4));
                                relation.appendChild(created);
                                Element entity1 = document.createElement("entity1");
                                entity1.setTextContent(r.resultSet.getString(5));
                                relation.appendChild(entity1);
                                Element entity2 = document.createElement("entity2");
                                entity2.setTextContent(r.resultSet.getString(6));
                                relation.appendChild(entity2);
                                relations.appendChild(relation);
                            }
                            r.close();

                            if(isCanceled()) {Log.l("exporting aborted"); return;}
                            this.processing(0.5, "exporting files...");
                            //files xml doc
                            Element files = document.createElement("files");
                            root.appendChild(files);

                            r = DB.select("SELECT count(*) FROM files");
                            r.resultSet.next();
                            long fileCount = r.resultSet.getLong(1);
                            r.close();

                            double i = 0;
                            r = DB.select("SELECT id, name, created, file, size, ocr FROM files ORDER BY id");
                            while (r.resultSet.next()) {
                                String fname = r.resultSet.getString(2);
                                if(isCanceled()) {Log.l("exporting aborted"); return;}
                                this.processing(i / fileCount * 0.5 + 0.5, "exporting file " + fname);
                                Element file = document.createElement("file");
                                Element id = document.createElement("id");
                                id.setTextContent(r.resultSet.getString(1));
                                file.appendChild(id);
                                Element name = document.createElement("name");
                                name.setTextContent(fname);
                                file.appendChild(name);
                                Element created = document.createElement("created");
                                created.setTextContent(r.resultSet.getString(3));
                                file.appendChild(created);
                                Element size = document.createElement("size");
                                size.setTextContent(r.resultSet.getString(5));
                                file.appendChild(size);
                                Element ocr = document.createElement("ocr");
                                ocr.setTextContent(r.resultSet.getString(6));
                                file.appendChild(ocr);
                                files.appendChild(file);

                                Entity e = DataHandler.instance.getEntityByID(r.resultSet.getLong(1));
                                new File(fileDir.getAbsolutePath() + File.separator + "id_" + e.id).mkdirs();
                                File f = new File(fileDir.getAbsolutePath() + File.separator + "id_" + e.id + File.separator + fname);

                                InputStream byteStream = null;
                                FileOutputStream fos = new FileOutputStream(f);
                                byteStream = r.resultSet.getBinaryStream(4);

                                long bytesRead = 0;
                                long fileSize = r.resultSet.getLong(5);
                                byte[] buffer = new byte[1024];
                                int tmpCount = 0;
                                while ((tmpCount = byteStream.read(buffer)) > 0) {
                                    bytesRead += tmpCount;
                                    fos.write(buffer);
                                    double percent = (double) bytesRead / (double) fileSize;
                                    if(isCanceled()) {Log.l("exporting aborted"); return;}
                                    processing(((double) bytesRead / (double) fileSize) * 1.0 / fileCount + i / fileCount * 0.5 + 0.5, "exporting file " + fname);
                                }
                                byteStream.close();
                                fos.close();

                                i += 1;
                            }
                        } finally {
                            r.close();
                        }
                        
                        if(isCanceled()) {Log.l("exporting aborted"); return;}
                        this.processing(0.99, "saving db file...");
                        saveXMLDocument(document, dbFile);
                        if(isCanceled()) {Log.l("exporting aborted"); return;}
                        this.processing(1.0, "finished!");

                    } catch (Exception ex) {
                        Log.l(ex);
                    }
                }
            }, true, "exporting database");

        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
        final JFileChooser fc = new JFileChooser();
        fc.setMultiSelectionEnabled(false);
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setFileSelectionMode(JFileChooser.SAVE_DIALOG);
        if (fc.showDialog(this, "import database") == JFileChooser.APPROVE_OPTION) {

            new WaitDialog(this, new WaitDialog.AsyncProcess("importing database...") {
                @Override
                public void finished(boolean success) {

                }

                @Override
                public void start() throws Exception {
                    try {
                        this.processing(0.0, "loading id range...");
                        long nextID_entity = 0;
                        long nextID_relation = 0;
                        
                        DB.DBResult r = DB.select("SELECT max(id) FROM entities");
                        if(r.resultSet.next()){
                            nextID_entity = r.resultSet.getLong(1) + 1000;
                        }
                        r.close();
                        
                        r = DB.select("SELECT max(id) FROM relations");
                        if(r.resultSet.next()){
                            nextID_relation = r.resultSet.getLong(1) + 1000;
                        }
                        r.close();
                        
                        Map<Long, Long> oldAndNewEntityIDLookupTable = new HashMap<>();
                        
                        
                        this.processing(0.0, "loading database file...");
                        //load document
                        DocumentBuilder db = DocumentBuilderFactory.newInstance().newDocumentBuilder();
                        Document document = db.parse(fc.getSelectedFile()+File.separator+"db.xml");
                        Element root = document.getDocumentElement();
                        XPathFactory xPathfactory = XPathFactory.newInstance();
                        XPath xpath = xPathfactory.newXPath();
                        XPathExpression xAllEntities = xpath.compile("/docz/entities/entity");
                        NodeList entityNodes = (NodeList)xAllEntities.evaluate(document, XPathConstants.NODESET);
                        
                        List<Relation> relations = new LinkedList<>();
                        
                        for(int i=0; i<entityNodes.getLength(); i++){
                            this.processing((double)(i+1)/(double)entityNodes.getLength(), "importing entity "+(i+1)+"/"+entityNodes.getLength());

                            //entity data
                            Node entityN = entityNodes.item(i);
                            Entity entity = new Entity();
                            
                            entity.setId(Long.parseLong((String)xpath.compile("id").evaluate(entityN, XPathConstants.STRING)));
                            entity.setTitle((String)xpath.compile("title").evaluate(entityN, XPathConstants.STRING));
                            entity.setDescription((String)xpath.compile("description").evaluate(entityN, XPathConstants.STRING));
                            entity.setDate(new Date(Long.parseLong((String)xpath.compile("date").evaluate(entityN, XPathConstants.STRING))));
                            entity.setCreated(new Date(Long.parseLong((String)xpath.compile("created").evaluate(entityN, XPathConstants.STRING))));
                            entity.setType(Integer.parseInt((String)xpath.compile("type").evaluate(entityN, XPathConstants.STRING)));
                            
                            
                            //tags
                            NodeList allTags = (NodeList)xpath.compile("/docz/tags/tag[id='"+entity.id+"']").evaluate(document, XPathConstants.NODESET);
                            XPathExpression xTag = xpath.compile("tag");
                            String tagString = "";
                            for(int j=0; j<allTags.getLength(); j++){
                                Node tagN = allTags.item(j);
                                tagString += xTag.evaluate(tagN, XPathConstants.STRING) + (j!=allTags.getLength()-1 ? ", " : "");
                            }                          
                            entity.setTagsAsString(tagString);
                            
                            
                            //relations
                            NodeList allRelations = (NodeList) xpath.compile("/docz/relations/relation[entity1='"+entity.id+"']").evaluate(document, XPathConstants.NODESET);
                            int tmp = allRelations.getLength();
                            if(tmp > 0) Log.l(tmp+" relations");
                            for(int j=0; j<allRelations.getLength(); j++){
                                Relation relation = new Relation();
                                Node relationN = allRelations.item(j);
                                
                                relation.setID(Long.parseLong((String)xpath.compile("id").evaluate(relationN, XPathConstants.STRING)));
                                relation.setTitle((String)xpath.compile("title").evaluate(relationN, XPathConstants.STRING));
                                relation.setDescription((String)xpath.compile("description").evaluate(relationN, XPathConstants.STRING));
                                relation.setCreated(new Date(Long.parseLong((String)xpath.compile("created").evaluate(relationN, XPathConstants.STRING))));
                                relation.setEntityID1(Long.parseLong((String)xpath.compile("entity1").evaluate(relationN, XPathConstants.STRING)));
                                relation.setEntityID2(Long.parseLong((String)xpath.compile("entity2").evaluate(relationN, XPathConstants.STRING)));
                                relations.add(relation);
                            }
                            
                            
                            //files                           
                            List<File> files = new ArrayList<>();
                            NodeList allFiles = (NodeList) xpath.compile("/docz/files/file[id='"+entity.id+"']").evaluate(document, XPathConstants.NODESET);
                            for(int j=0; j<allFiles.getLength(); j++){
                                Node fileN = allFiles.item(j);
                                String name = (String)xpath.compile("name").evaluate(fileN, XPathConstants.STRING);
                                Date created = new Date(Long.parseLong((String)xpath.compile("created").evaluate(fileN, XPathConstants.STRING)));
                                File file = new File(fc.getSelectedFile()+File.separator+"files"+File.separator+"id_"+entity.id+File.separator+name);
                                long size = Long.parseLong((String)xpath.compile("size").evaluate(fileN, XPathConstants.STRING));
                                String ocr = (String)xpath.compile("ocr").evaluate(fileN, XPathConstants.STRING);
                                files.add(file);
                            }
                            
                            
                            //save to DB
                            long oldID = entity.id;
                            entity = DataHandler.instance.createEntity(entity.title, entity.description, Arrays.asList(entity.getTags()), entity.date, entity.type);
                            oldAndNewEntityIDLookupTable.put(oldID, entity.id);
                            
                            //save files
                            DataHandler.instance.addFiles(entity, files.toArray(new File[files.size()]));
                            
                            Log.l("imported: "+entity);
                        }
                        
                        this.processing(0.99, "saving relations...");
                        for(Relation relation : relations){
                            DataHandler.instance.createRelation(relation.title, relation.description, 
                                    DataHandler.instance.getEntityByID(oldAndNewEntityIDLookupTable.get(relation.entityID1)), 
                                    DataHandler.instance.getEntityByID(oldAndNewEntityIDLookupTable.get(relation.entityID2))
                            );
                        }
                                              
                        this.processing(1.0, "finished importing...");
                                                
                        
                    } catch (Exception e) {
                        Log.l(e);
                    }
                }
            }, true, "importing database");
        }
    }//GEN-LAST:event_btnImportActionPerformed

    private void saveXMLDocument(Document document, File file) {
        try {
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            DOMSource domSource = new DOMSource(document);
            StreamResult streamResult = new StreamResult(file);
            transformer.transform(domSource, streamResult);
        } catch (Exception ex) {
            Log.l(ex);
        }
    }

    public void doSearch(final long delay) {
        if (searchProgress != null && !searchProgress.isFinished()) {
            searchProgress.cancel(); //concurrency problems????
        }

        searchProgress = new WaitDialog.AsyncProcess("search") {
            Entity[] findings = null;

            @Override
            public void start() throws Exception {

                DataHandler.Sorting sorting = DataHandler.Sorting.Date;

                switch (cbxSorting.getSelectedItem().toString()) {
                    case "Date":
                        sorting = DataHandler.Sorting.Date;
                        break;
                    case "Created":
                        sorting = DataHandler.Sorting.Created;
                        break;
                    case "Title":
                        sorting = DataHandler.Sorting.Title;
                        break;
                }

                findings = DataHandler.instance.search(txtSearch.getText().split(" "),
                        ckbDocs.isSelected(),
                        ckbInstitutions.isSelected(),
                        ckbRelations.isSelected(),
                        ckbTags.isSelected(),
                        ckbMinDate.isSelected() ? DateFormat.getDateInstance().parse(btnMinDate.getText()) : null,
                        ckbMaxDate.isSelected() ? DateFormat.getDateInstance().parse(btnMaxDate.getText()) : null,
                        ckbFiles.isSelected(),
                        ((Integer) spMaxResult.getModel().getValue()),
                        sorting,
                        ckbDescending.isSelected() ? DataHandler.SortingOrder.Descending : DataHandler.SortingOrder.Ascending
                );
            }

            @Override
            public void finished(boolean success) {
                try {
                    if (!searchProgress.isCanceled() && findings != null) {
                        contentPanel.showResults(findings);
                    }
                } catch (Exception ex) {
                    Log.l(ex);
                }
            }
        };
        new WaitDialog(null, searchProgress, true, false, delay, "Searching for Entities");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DocZMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DocZMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DocZMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DocZMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DocZMainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnChangePW;
    private javax.swing.JButton btnImport;
    private javax.swing.JButton btnMaxDate;
    private javax.swing.JButton btnMinDate;
    private javax.swing.JComboBox cbxSorting;
    private javax.swing.JCheckBox ckbDescending;
    private javax.swing.JCheckBox ckbDocs;
    private javax.swing.JCheckBox ckbFiles;
    private javax.swing.JCheckBox ckbInstitutions;
    private javax.swing.JCheckBox ckbMaxDate;
    private javax.swing.JCheckBox ckbMinDate;
    private javax.swing.JCheckBox ckbRelations;
    private javax.swing.JCheckBox ckbTags;
    private docz.ContentPanel contentPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSpinner spMaxResult;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
